---
parameters:
  - name: buildId
    description: "Unique build number for each run."
  - name: REPO_OWNER
    description: "GitHub org that triggered the job."
  - name: REPO_NAME
    description: "GitHub repo that triggered the job."
  - name: PULL_BASE_REF
    description: "Ref name of the base branch."
  - name: PULL_BASE_SHA
    description: "Git SHA of the base branch."
  - name: PULL_REFS
    description: "All refs to test."
  - name: PULL_NUMBER
    description: "Pull request number."
  - name: PULL_PULL_SHA
    description: "Pull request head SHA."
provision:
  os: "rhel"
  stage: "crio"
  provider: "aws"
sync_repos: []
actions:
  - type: "script"
    title: "record the starting metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      cd /data/src/github.com/openshift/aos-cd-jobs
      git fetch origin
      sjb/gcs/started.py
  - type: "host_script"
    title: "upload GCS starting metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/data/started.json gcs/

      function gcs_path() {
        bucket="gs://origin-ci-test/"

        if [[ -z "${buildId}" ]]; then
          echo "Not a Prow job!" 1>&2
          return 1
        fi
        suffix="${JOB_NAME}/${BUILD_NUMBER}/"
        if [[ -n "${REPO_OWNER:-}" ]]; then
          if [[ "${REPO_NAME}" != "origin" ]]; then
            segment="${REPO_OWNER}_${REPO_NAME}/"
          fi
          if [[ -n "${PULL_NUMBER:-}" ]]; then
            # this is a presubmit
            prefix="pr-logs/pull/"
            segment="${segment:-}${PULL_NUMBER}/"
          else
            if [[ "${PULL_REFS}" =~ ^[^:]+:[^:]+(,[^:]+:[^:]+){2,} ]]; then
              # this is a batch
              prefix="pr-logs/pull/batch/"
            else
              # this is a postsubmit
              prefix="logs/"
            fi
          fi
        else
          # this is a periodic
          prefix="logs/"
        fi
        echo "${bucket}${prefix}${segment:-}${suffix}"
        return 0
      }
      if path="$( gcs_path )"; then
        gsutil cp gcs/started.json "${path}started.json"
        if [[ -n "${PULL_NUMBER:-}" ]]; then
          echo "${path}" > "${BUILD_NUMBER}.txt"
          if [[ -n "${REPO_OWNER:-}" && "${REPO_NAME:-}" != "origin" ]]; then
            segment="${REPO_OWNER}_${REPO_NAME}/"
          fi
          gsutil cp "${BUILD_NUMBER}.txt" "gs://origin-ci-test/pr-logs/directory/${segment:-}${JOB_NAME}/${BUILD_NUMBER}.txt"
        fi
      fi
  - type: "forward_parameters"
    parameters:
      - PULL_NUMBER
      - PULL_BASE_SHA
      - PULL_PULL_SHA
  - type: "script"
    title: "clone cri-o and check out the correct refs"
    script: |-
      cd /data/src/github.com/kubernetes-incubator/cri-o
      git fetch origin
      git branch target "${PULL_BASE_SHA}"
      git checkout target
      git fetch origin "pull/${PULL_NUMBER}/head:pr"
      git merge "${PULL_PULL_SHA}"
  - type: "script"
    title: "run the cri-o e2e tests"
    script: |-
      ansible-playbook -vv --become  \
                       -i localhost, \
                       --tags e2e    \
                       --become-user root \
                       --connection local \
                       /data/src/github.com/kubernetes-incubator/cri-o/contrib/test/integration/main.yml
post_actions:
  - type: "script"
    title: "gather cri-o test output"
    script: |-
      if [[ ! -s /data/src/github.com/kubernetes-incubator/cri-o/contrib/test/integration/results.yml ]]; then
        echo "Skipping, no results playbook found."
        exit 0
      fi
      ansible-playbook -vv --become  \
                       -i localhost, \
                       --tags e2e    \
                       --become-user root \
                       --connection local \
                       /data/src/github.com/kubernetes-incubator/cri-o/contrib/test/integration/results.yml
  - type: "forward_parameters"
    parameters:
      - BUILD_URL
  - type: "script"
    title: "record the ending metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      cd /data/src/github.com/openshift/aos-cd-jobs
      sjb/gcs/finished.py
  - type: "host_script"
    title: "assemble GCS output"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/artifacts gcs/artifacts/generated gcs/artifacts/journals gcs/artifacts/scripts
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/data/finished.json gcs/
      cat "/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log" > gcs/build-log.txt
      i=0
      for report in $( find artifacts/ -type f -name \*.xml ); do
        name="$( printf 'junit_%02d.xml' "$i" )"
        cp "${report}" "gcs/artifacts/${name}"
        i="$(( i += 1))"
      done
      cp artifacts/generated/* gcs/artifacts/generated/
      cp artifacts/journals/* gcs/artifacts/journals/
      cp -r artifacts/scripts/* gcs/artifacts/scripts/

      function gcs_path() {
        bucket="gs://origin-ci-test/"

        if [[ -z "${buildId}" ]]; then
          echo "Not a Prow job!" 1>&2
          return 1
        fi
        suffix="${JOB_NAME}/${BUILD_NUMBER}/"
        if [[ -n "${REPO_OWNER:-}" ]]; then
          if [[ "${REPO_NAME:-}" != "origin" ]]; then
            segment="${REPO_OWNER}_${REPO_NAME}/"
          fi
          if [[ -n "${PULL_NUMBER:-}" ]]; then
            # this is a presubmit
            prefix="pr-logs/pull/"
            segment="${segment:-}${PULL_NUMBER}/"
          else
            if [[ "${PULL_REFS}" =~ ^[^:]+:[^:]+(,[^:]+:[^:]+){2,} ]]; then
              # this is a batch
              prefix="pr-logs/pull/batch/"
            else
              # this is a postsubmit
              prefix="logs/"
            fi
          fi
        else
          # this is a periodic
          prefix="logs/"
        fi
        echo "${bucket}${prefix}${segment:-}${suffix}"
        return 0
      }
      if path="$( gcs_path )"; then
        gsutil -m cp -r gcs/* "${path}"
      fi
artifacts:
  - /data/src/k8s.io/kubernetes/artifacts
  - /data/src/k8s.io/kubernetes/e2e.log
  - /tmp/artifacts
  - /tmp/kubelet.log
  - /tmp/kube-apiserver.log
  - /tmp/kube-controller-manager.log
  - /tmp/kube-proxy.log
  - /tmp/kube-proxy.yaml
  - /tmp/kube-scheduler.log
generated_artifacts:
  installed_packages.log: 'sudo yum list installed'
  avc_denials.log: 'sudo ausearch -m AVC -m SELINUX_ERR -m USER_AVC'
  filesystem.info: 'sudo df -h && sudo pvs && sudo vgs && sudo lvs'
  pid1.journal: 'sudo journalctl _PID=1 --no-pager --all --lines=all'
system_journals:
  - crio.service
  - customcluster.service
